%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 610
%%HiResBoundingBox: 0 0 2391.1199 609.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 609.12 re
W
q
[0.24 0 0 -0.24 0 609.12] cm
q
0 0 9962.5 2534.375 re
W*
q
[75.713257 0 0 75.680992 -108.195473 -637.99078] cm
/DeviceRGB {} CS
[0.2196 0.2588 0.349] SC
/DeviceRGB {} cs
[0.2196 0.2588 0.349] sc
1 w
0 J
0 j
10 M
1 w
0 J
0 j
10 M
5.3 22.4 m
25.799999 32.200001 l
44 22.4 l
24.6 12.3 l
5.3 22.4 l
h
S
14.5 27 m
14.5 34 l
14.5 34 24 43.200001 35.400002 34 c
S
41.5 24 m
41.5 29 l
S
42.900002 30.399998 m
42.900005 30.455675 42.897274 30.511219 42.891815 30.566626 c
42.88636 30.622036 42.878201 30.677042 42.867332 30.731647 c
42.856472 30.786257 42.84296 30.8402 42.826797 30.893478 c
42.810631 30.94676 42.791893 30.999119 42.770588 31.050556 c
42.749283 31.101995 42.72551 31.152266 42.699265 31.20137 c
42.673016 31.250471 42.644424 31.29817 42.613487 31.344463 c
42.582561 31.390759 42.549435 31.435427 42.514111 31.478466 c
42.478794 31.521505 42.441448 31.562708 42.402077 31.602077 c
42.362705 31.641449 42.321503 31.678795 42.278465 31.714115 c
42.235424 31.749437 42.190758 31.782562 42.144459 31.813494 c
42.098167 31.844429 42.050468 31.873018 42.001369 31.899263 c
41.952267 31.92551 41.901997 31.949287 41.850555 31.970592 c
41.799118 31.991901 41.746758 32.010635 41.693478 32.026798 c
41.640198 32.042957 41.586258 32.056469 41.531651 32.067329 c
41.477047 32.078194 41.422039 32.086357 41.366627 32.091816 c
41.311222 32.097271 41.25568 32.099998 41.200001 32.099998 c
41.144325 32.099998 41.088783 32.097271 41.033375 32.091816 c
40.977962 32.086357 40.922951 32.078194 40.868343 32.067329 c
40.813736 32.056469 40.759792 32.042957 40.706512 32.026794 c
40.653233 32.010632 40.600872 31.991898 40.549431 31.970589 c
40.497993 31.949284 40.447723 31.925507 40.398621 31.89926 c
40.349518 31.873016 40.301819 31.844427 40.255524 31.813492 c
40.209232 31.78256 40.164566 31.749435 40.121525 31.714113 c
40.078491 31.678791 40.037285 31.641445 39.997913 31.602076 c
39.958542 31.562706 39.9212 31.521502 39.88588 31.478462 c
39.850559 31.435425 39.817429 31.390759 39.786495 31.344463 c
39.755566 31.29817 39.726978 31.250471 39.700729 31.201366 c
39.67448 31.152266 39.650703 31.101995 39.629398 31.050556 c
39.608093 30.999119 39.589363 30.94676 39.5732 30.893478 c
39.557037 30.8402 39.543526 30.786257 39.532661 30.731647 c
39.521801 30.677042 39.513641 30.622036 39.508186 30.566626 c
39.502728 30.511219 39.5 30.455675 39.5 30.399998 c
39.5 30.34432 39.502728 30.288778 39.508186 30.233368 c
39.513641 30.177961 39.521801 30.122952 39.532661 30.068342 c
39.543526 30.013737 39.557037 29.959793 39.5732 29.906513 c
39.589363 29.853231 39.608093 29.800871 39.629398 29.749432 c
39.650703 29.697994 39.67448 29.647724 39.700729 29.598621 c
39.726978 29.549519 39.755566 29.50182 39.786495 29.455526 c
39.817429 29.409233 39.850559 29.364567 39.88588 29.321527 c
39.9212 29.27849 39.958542 29.237286 39.997913 29.197916 c
40.037285 29.158548 40.078491 29.121202 40.121525 29.08588 c
40.164566 29.050558 40.209232 29.017431 40.255524 28.986496 c
40.301819 28.955566 40.349518 28.926979 40.398621 28.900732 c
40.447723 28.874487 40.497993 28.85071 40.549431 28.829401 c
40.600872 28.808096 40.653233 28.789362 40.706512 28.773199 c
40.759792 28.757038 40.813736 28.743525 40.868343 28.732662 c
40.922951 28.721802 40.977962 28.713642 41.033375 28.708185 c
41.088783 28.702728 41.144325 28.700001 41.200001 28.699999 c
41.25568 28.700001 41.311222 28.702728 41.366627 28.708185 c
41.422039 28.713642 41.477047 28.721802 41.531651 28.732662 c
41.586258 28.743525 41.640198 28.757036 41.693478 28.773197 c
41.746758 28.789362 41.799118 28.808096 41.850559 28.829401 c
41.902 28.85071 41.952274 28.874487 42.001377 28.900732 c
42.050476 28.926979 42.098175 28.955566 42.144466 28.986496 c
42.190765 29.017431 42.235432 29.050558 42.278473 29.08588 c
42.32151 29.121202 42.362713 29.158548 42.402084 29.197916 c
42.441456 29.237286 42.478802 29.27849 42.514118 29.321527 c
42.549442 29.364567 42.582569 29.409233 42.613495 29.455524 c
42.644428 29.50182 42.673016 29.549519 42.699265 29.598619 c
42.725513 29.647724 42.749287 29.697994 42.770592 29.749432 c
42.791901 29.800871 42.810638 29.853231 42.826801 29.906513 c
42.842964 29.959793 42.856472 30.013737 42.867332 30.068342 c
42.878201 30.122952 42.88636 30.177961 42.891815 30.233368 c
42.897274 30.288778 42.900005 30.34432 42.900002 30.399998 c
h
S
Q
q
[42.402843 0 0 42.384773 3785.606 782.74506] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0.55664 16.494101 m
1.78714 15.75191 l
2.653025 17.346962 3.652374 18.144489 4.785187 18.144489 c
5.273468 18.144489 5.732452 18.030558 6.16214 17.802692 c
6.591827 17.574827 6.917347 17.272095 7.1387 16.894493 c
7.360053 16.516892 7.470729 16.113258 7.47073 15.683593 c
7.47073 15.201822 7.30797 14.726561 6.982449 14.257811 c
6.52672 13.61328 5.696641 12.955729 4.492214 12.285155 c
3.281277 11.373697 2.532579 10.71289 2.246121 10.302733 c
1.731798 9.62565 1.474636 8.886718 1.474636 8.085937 c
1.474636 7.454426 1.624376 6.881509 1.923855 6.367186 c
2.223334 5.852864 2.648134 5.44433 3.198255 5.141586 c
3.748376 4.838842 4.345709 4.687476 4.990255 4.687486 c
5.667338 4.687486 6.302104 4.858385 6.894552 5.200181 c
7.487 5.541978 8.115267 6.165345 8.779352 7.070282 c
7.597752 7.958951 l
7.057387 7.242805 6.595148 6.769173 6.211033 6.538053 c
5.826919 6.306933 5.406985 6.191373 4.951233 6.191373 c
4.371806 6.191373 3.896546 6.368782 3.525452 6.723599 c
3.154358 7.078417 2.968812 7.512984 2.968812 8.0273 c
2.968812 8.3398 3.033917 8.645789 3.164125 8.945269 c
3.294333 9.244748 3.53522 9.563758 3.886785 9.902299 c
4.075587 10.091101 4.700586 10.576127 5.761785 11.357377 c
7.011785 12.281857 7.869532 13.04683 8.335027 13.652299 c
8.800522 14.257768 9.033268 14.921834 9.033267 15.644499 c
9.033267 16.699186 8.634504 17.613899 7.836978 18.388639 c
7.039452 19.16338 6.071019 19.550745 4.931678 19.550739 c
4.046261 19.550739 3.24548 19.316364 2.529334 18.847614 c
1.813188 18.378864 1.155622 17.594364 0.556634 16.494114 c
0.55664 16.494101 l
h
11.376997 8.477 m
12.763697 8.477 l
12.763697 13.477 l
12.763697 14.700958 12.828801 15.540802 12.959009 15.996532 c
13.154322 16.654083 13.52867 17.17329 14.082056 17.55415 c
14.635442 17.935009 15.299508 18.125439 16.074257 18.125439 c
16.842485 18.125439 17.493528 17.939892 18.027382 17.568798 c
18.561235 17.197704 18.92907 16.709438 19.130882 16.103998 c
19.274111 15.693842 19.345726 14.818191 19.345726 13.477045 c
19.345726 8.477045 l
20.752026 8.477045 l
20.752026 13.740746 l
20.752026 15.21861 20.577871 16.330263 20.229565 17.075706 c
19.881258 17.82115 19.362057 18.403816 18.671965 18.823706 c
17.981873 19.243595 17.115973 19.453556 16.074265 19.453587 c
15.026088 19.453587 14.153691 19.243626 13.457077 18.823704 c
12.760463 18.403782 12.239629 17.814581 11.894577 17.056103 c
11.549525 16.297625 11.376998 15.156657 11.376997 13.633203 c
11.376997 8.476902 l
11.376997 8.477 l
h
34.189625 10.7031 m
33.095825 11.38669 l
32.151814 10.12367 30.862753 9.492159 29.228638 9.492159 c
27.920044 9.492159 26.834433 9.912081 25.971802 10.751925 c
25.109171 11.591768 24.677872 12.613902 24.677902 13.818325 c
24.677902 14.599575 24.876471 15.33688 25.273605 16.030239 c
25.67074 16.723598 26.214375 17.259066 26.904505 17.636639 c
27.594635 18.014212 28.36937 18.203016 29.228704 18.203049 c
30.810736 18.203049 32.0998 17.578049 33.095894 16.328049 c
34.189693 17.040939 l
33.675369 17.809168 32.986893 18.403244 32.124264 18.823166 c
31.261633 19.243088 30.276934 19.453049 29.170164 19.453047 c
27.483967 19.453047 26.0826 18.915937 24.966063 17.841719 c
23.849525 16.7675 23.29126 15.462167 23.291262 13.925718 c
23.291262 12.884051 23.553307 11.918882 24.077394 11.03021 c
24.601482 10.141539 25.317616 9.448172 26.225794 8.95011 c
27.133972 8.452049 28.154472 8.203026 29.287294 8.20304 c
29.990419 8.20304 30.672386 8.310462 31.333193 8.525306 c
31.993999 8.74015 32.555531 9.021727 33.017792 9.370036 c
33.480053 9.718346 33.870686 10.16268 34.189693 10.703036 c
34.189625 10.7031 l
h
47.216969 10.7031 m
46.123169 11.38669 l
45.179157 10.12367 43.890095 9.492159 42.255981 9.492159 c
40.947388 9.492159 39.861774 9.912081 38.999146 10.751925 c
38.136517 11.591768 37.705215 12.613902 37.705246 13.818325 c
37.705246 14.599575 37.903812 15.33688 38.300949 16.030239 c
38.698086 16.723598 39.241718 17.259066 39.93185 17.636639 c
40.621983 18.014212 41.396717 18.203016 42.25605 18.203049 c
43.838081 18.203049 45.127144 17.578049 46.123238 16.328049 c
47.217037 17.040939 l
46.702713 17.809168 46.014236 18.403244 45.151608 18.823166 c
44.288979 19.243088 43.304276 19.453049 42.197506 19.453047 c
40.511307 19.453047 39.10994 18.915937 37.993404 17.841719 c
36.876869 16.7675 36.3186 15.462167 36.318604 13.925718 c
36.318604 12.884051 36.580647 11.918882 37.104736 11.03021 c
37.628826 10.141539 38.344959 9.448172 39.253136 8.95011 c
40.161312 8.452049 41.181812 8.203026 42.314636 8.20304 c
43.017761 8.20304 43.699726 8.310462 44.360535 8.525306 c
45.021343 8.74015 45.582874 9.021727 46.045135 9.370036 c
46.507397 9.718346 46.898029 10.16268 47.217037 10.703036 c
47.216969 10.7031 l
h
58.867313 15.6348 m
60.019615 16.25003 l
59.648521 16.998728 59.212322 17.600943 58.711021 18.056671 c
58.209721 18.5124 57.646553 18.859068 57.021523 19.096672 c
56.396492 19.334276 55.690125 19.453093 54.902424 19.453121 c
53.157631 19.453121 51.793701 18.881832 50.810627 17.739254 c
49.827553 16.596676 49.336021 15.305976 49.336025 13.867154 c
49.336025 12.506477 49.752693 11.29554 50.586025 10.234342 c
51.640713 8.880175 53.056728 8.203092 54.834072 8.203092 c
56.650478 8.203092 58.105556 8.896451 59.199306 10.28317 c
59.974045 11.259732 60.36467 12.477181 60.371181 13.935514 c
50.752083 13.935514 l
50.778126 15.185514 51.175259 16.209276 51.943489 17.006802 c
52.71172 17.804327 53.658985 18.203094 54.78529 18.203102 c
55.332165 18.203102 55.862762 18.107073 56.377087 17.915016 c
56.891411 17.72296 57.329243 17.470678 57.690586 17.158176 c
58.051929 16.845675 58.444195 16.337874 58.867386 15.634776 c
58.867313 15.6348 l
h
58.867313 12.7539 m
58.68502 12.018223 58.418095 11.430657 58.066532 10.991204 c
57.71497 10.551751 57.24947 10.196918 56.670033 9.926704 c
56.090595 9.656491 55.481861 9.521401 54.843834 9.521435 c
53.795658 9.521435 52.893963 9.859977 52.138756 10.53706 c
51.591881 11.031852 51.178471 11.770783 50.898521 12.753857 c
58.867321 12.753857 l
58.867313 12.7539 l
h
68.320351 9.648 m
67.441444 10.56597 l
66.699257 9.849824 65.979858 9.491751 65.283241 9.491751 c
64.834023 9.491751 64.449905 9.638235 64.130898 9.931204 c
63.811886 10.224173 63.652382 10.572473 63.652378 10.976104 c
63.652378 11.314646 63.785839 11.640166 64.052765 11.952666 c
64.313179 12.284698 64.863312 12.665557 65.703156 13.095244 c
66.731804 13.622588 67.428413 14.133656 67.792999 14.628448 c
68.15107 15.129749 68.330109 15.692901 68.330109 16.317902 c
68.330109 17.190298 68.022491 17.930857 67.407257 18.539581 c
66.792023 19.148306 66.022156 19.452669 65.097656 19.452671 c
64.479164 19.452671 63.888348 19.320835 63.325195 19.057163 c
62.762043 18.793491 62.298176 18.424025 61.933594 17.948763 c
62.802734 16.962433 l
63.505859 17.756704 64.251305 18.153839 65.039063 18.153839 c
65.585938 18.153839 66.053062 17.976431 66.44043 17.621613 c
66.827797 17.266794 67.021484 16.851761 67.021477 16.376512 c
67.021477 15.979377 66.894524 15.627814 66.640617 15.321825 c
66.386711 15.015836 65.810547 14.631736 64.912117 14.169525 c
63.942066 13.681244 63.284512 13.189708 62.939461 12.694916 c
62.587898 12.213145 62.412117 11.65976 62.412117 11.03476 c
62.412117 10.220958 62.690437 9.545502 63.247078 9.008392 c
63.803719 8.471283 64.501953 8.202729 65.341782 8.202732 c
66.324852 8.202732 67.317696 8.684503 68.320297 9.648045 c
68.320351 9.648 l
h
76.132851 9.648 m
75.253944 10.56597 l
74.511757 9.849824 73.792358 9.491751 73.095741 9.491751 c
72.646523 9.491751 72.262405 9.638235 71.943398 9.931204 c
71.62439 10.224173 71.464882 10.572473 71.464874 10.976104 c
71.464874 11.314646 71.598335 11.640166 71.865265 11.952666 c
72.125679 12.284698 72.675812 12.665557 73.515656 13.095244 c
74.544304 13.622588 75.240913 14.133656 75.605499 14.628448 c
75.96357 15.129749 76.142609 15.692901 76.142609 16.317902 c
76.142609 17.190298 75.834991 17.930857 75.219757 18.539581 c
74.604523 19.148306 73.834656 19.452669 72.910156 19.452671 c
72.291664 19.452671 71.700844 19.320835 71.137695 19.057163 c
70.574547 18.793491 70.11068 18.424025 69.746094 17.948763 c
70.615234 16.962433 l
71.318359 17.756704 72.063805 18.153839 72.851563 18.153839 c
73.398438 18.153839 73.865562 17.976431 74.25293 17.621613 c
74.640297 17.266794 74.833984 16.851761 74.833977 16.376512 c
74.833977 15.979377 74.707024 15.627814 74.453117 15.321825 c
74.199211 15.015836 73.623047 14.631736 72.724617 14.169525 c
71.754562 13.681244 71.097015 13.189708 70.751961 12.694916 c
70.400398 12.213145 70.224617 11.65976 70.224617 11.03476 c
70.224617 10.220958 70.502937 9.545502 71.059578 9.008392 c
71.616219 8.471283 72.314453 8.202729 73.154282 8.202732 c
74.137352 8.202732 75.130196 8.684503 76.132797 9.648045 c
76.132851 9.648 l
h
84.794945 17.3633 m
84.209007 16.386738 83.857445 15.426452 83.740257 14.482441 c
83.740257 7.705097 83.740257 4.322936 83.740257 4.335957 c
85.10746 4.335957 l
85.10746 10.312557 l
85.68689 9.602921 86.334671 9.073951 87.050819 8.725643 c
87.766968 8.377336 88.551468 8.203182 89.40432 8.203183 c
90.914734 8.203183 92.207054 8.753313 93.281273 9.853574 c
94.355492 10.953835 94.892593 12.288467 94.89257 13.857473 c
94.89257 15.400442 94.352203 16.718802 93.271477 17.812551 c
92.19075 18.906301 90.888649 19.453169 89.365173 19.453152 c
88.492775 19.453152 87.674095 19.285509 86.909119 18.950222 c
86.144142 18.614935 85.439377 18.085968 84.794815 17.363321 c
84.794945 17.3633 l
h
89.248047 18.1348 m
90.022789 18.1348 90.734047 17.94437 91.381836 17.563511 c
92.029625 17.182652 92.545586 16.653685 92.929733 15.976611 c
93.313881 15.299538 93.505936 14.576871 93.505905 13.808611 c
93.505905 13.053403 93.312218 12.329119 92.92485 11.635759 c
92.537483 10.9424 92.016647 10.4053 91.36235 10.02446 c
90.708054 9.64362 90.009819 9.45319 89.267647 9.45317 c
88.512436 9.45317 87.796295 9.6436 87.119209 10.024459 c
86.442123 10.405318 85.921295 10.922885 85.556709 11.577159 c
85.192123 12.231433 85.009834 12.962233 85.009827 13.769559 c
85.009827 15.013048 85.419983 16.05146 86.240295 16.884792 c
87.060608 17.718126 88.06321 18.134792 89.248093 18.134792 c
89.248047 18.1348 l
h
102.714844 8.203 m
104.361977 8.203 105.729164 8.798703 106.816406 9.990109 c
107.819008 11.077349 108.320313 12.369667 108.320313 13.867063 c
108.333336 17.56498 108.333336 19.443233 108.320313 19.501827 c
106.865211 19.501827 l
106.865211 17.070227 l
106.103493 18.489498 104.720032 19.283768 102.714821 19.453039 c
101.074196 19.453039 99.73468 18.894772 98.696266 17.778234 c
97.657852 16.661697 97.138657 15.357998 97.138664 13.867134 c
97.138664 12.382759 97.630203 11.093697 98.613274 9.999947 c
99.700516 8.80203 101.067703 8.203072 102.714836 8.203072 c
102.714844 8.203 l
h
102.714844 9.551 m
101.575523 9.551 100.595703 9.974176 99.775391 10.820531 c
98.955078 11.666885 98.544914 12.689018 98.544891 13.886931 c
98.544891 14.66167 98.754852 15.407113 99.174774 16.123259 c
99.594696 16.839405 100.305962 17.444872 101.308571 17.939659 c
103.821594 18.499556 105.608704 17.356977 106.669899 14.511925 c
106.728493 13.600467 106.630836 12.72807 106.37693 11.894737 c
106.194641 11.517133 105.943985 11.159061 105.624977 10.820519 c
104.824196 9.974164 103.854141 9.550987 102.714821 9.550987 c
102.714844 9.551 l
h
110.98629 15.3809 m
110.966759 14.2383 l
110.947227 13.678405 110.970016 13.203144 111.035118 12.812519 c
111.178345 11.58205 111.490845 10.680358 111.972618 10.107441 c
112.441368 9.606139 112.919884 9.218769 113.408165 8.945332 c
114.215454 8.60028 115.136681 8.437519 116.171837 8.45705 c
116.979126 8.45705 117.726196 8.660501 118.413048 9.067402 c
119.099899 9.474303 119.589798 10.02117 119.882751 10.708002 c
120.175705 11.394835 120.322189 12.470668 120.322205 13.935502 c
120.322205 19.443302 l
118.955002 19.443302 l
118.955002 14.335902 l
118.955002 13.098923 118.902916 12.2721 118.798752 11.855434 c
118.635994 11.145798 118.313728 10.642868 117.831955 10.346644 c
117.350182 10.050421 116.637283 9.902308 115.693253 9.902305 c
114.859917 9.902305 114.117729 10.14319 113.46669 10.624961 c
112.815651 11.106731 112.512917 11.764298 112.558487 12.597661 c
112.434792 13.131515 112.37294 14.104822 112.37294 15.517583 c
112.37294 19.443382 l
110.986237 19.443382 l
110.986237 15.380882 l
110.98629 15.3809 l
h
123.242218 4.59 m
124.628922 4.59 l
124.628922 13.047 l
129.580124 8.7306 l
131.61142 8.7306 l
127.129021 12.8029 l
131.953217 19.443501 l
130.000122 19.443501 l
125.781319 13.681801 l
124.629021 14.629071 l
124.629021 19.443571 l
123.242317 19.443571 l
123.242317 4.589571 l
123.242218 4.59 l
h
138.750031 9.648 m
137.871124 10.56597 l
137.128937 9.849824 136.409531 9.491751 135.712921 9.491751 c
135.263702 9.491751 134.879593 9.638235 134.560577 9.931204 c
134.241562 10.224173 134.082062 10.572473 134.082062 10.976104 c
134.082062 11.314646 134.21553 11.640166 134.482452 11.952666 c
134.742874 12.284698 135.292999 12.665557 136.132843 13.095244 c
137.161484 13.622588 137.858109 14.133656 138.222687 14.628448 c
138.580765 15.129749 138.759796 15.692901 138.759796 16.317902 c
138.759796 17.190298 138.452179 17.930857 137.836945 18.539581 c
137.22171 19.148306 136.451843 19.452669 135.527344 19.452671 c
134.908859 19.452671 134.318039 19.320835 133.754883 19.057163 c
133.191727 18.793491 132.727859 18.424025 132.363281 17.948763 c
133.232422 16.962433 l
133.935547 17.756704 134.680984 18.153839 135.46875 18.153839 c
136.015625 18.153839 136.482742 17.976431 136.870117 17.621613 c
137.257492 17.266794 137.451172 16.851761 137.451172 16.376512 c
137.451172 15.979377 137.324219 15.627814 137.070313 15.321825 c
136.816406 15.015836 136.240234 14.631736 135.341812 14.169525 c
134.371765 13.681244 133.714203 13.189708 133.369156 12.694916 c
133.017593 12.213145 132.841812 11.65976 132.841812 11.03476 c
132.841812 10.220958 133.120132 9.545502 133.676773 9.008392 c
134.233414 8.471283 134.931641 8.202729 135.771469 8.202732 c
136.754547 8.202732 137.747375 8.684503 138.749985 9.648045 c
138.750031 9.648 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
